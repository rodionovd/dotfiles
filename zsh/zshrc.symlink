export LC_CTYPE="UTF-8"
export LANG=en_US.UTF-8

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Look for themes in ~/.oh-my-zsh/themes/
ZSH_THEME="rodionovd"

# Aliases and functions
alias cl="clear"
# Remove "._" resource files
alias remove_dot_underscore_files="find . -type f -name \"._*\" -delete"
# Open an x86_64 executable in Hopper Disassembler
alias hop="hopper -o -a -M -F -X -e"
# Open an i386 executable in Hopper Disassembler
alias hop86="hopper -o -a -M -f -x -e"
# Open an executable in MachOView
function macho() {
    # Usage: macho /Application/Notes.app/Contents/MacOS/Notes
    open $1 -a MachOView
}
# Open a 64-bit Cocoa application in Hopper Disassembler
function hopa() {
    # Usage: hopa /Application/Notes.app
    executable=$(/usr/libexec/PlistBuddy -c "Print :CFBundleExecutable" "$1/Contents/Info.plist")
    hop "$1/Contents/MacOS/$executable"
}
# terminal-notifier is a way too long name for such handy tool
alias tn="terminal-notifier -sound default -message"
# I made you, so I can break you
alias kl="sudo killall"
# yolo
alias qq="xattr -rd com.apple.quarantine"
# I can't remember anything, so
function timer() {
    # Usage: timer $value[m,h] [text]
    if (( $# == 0 )) then
        echo "Empty timer, eh?"
    fi
    # Convert minutes/hours into seconds
    case "$1" in
    	*m) t=${1%m}; t=$(($t*60)) ;;
    	*h) t=${1%h}; t=$(($t*60*60)) ;;
    	*)  t=$1;
    esac
    if (( $# == 1 )) then
        (sleep $t && tn "Time's up!" -title "Hey ðŸ‘‹") &
    fi
    if (( $# == 2 )) then
        (sleep $t && tn "$2" -title "Hey ðŸ‘‹") &
    fi
}
# open(1) on steroids
function o() {
    if (( $# == 0 )) then
        open .
    else
        open $1
    fi
}
# Random passwords every time
function genpass() {
    if (( $# == 0 )) then
        echo "Usage: genpass <password length>"
    else
        openssl rand -base64 $1
    fi
}
# Verify that my Xcode came from a trustworthy source
function xcode-verify() {
    if [[ -d "/Applications/Xcode-beta.app" ]] then
        spctl --assess --verbose "/Applications/Xcode-beta.app"
    fi
    if [[ -d "/Applications/Xcode.app" ]] then
        spctl --assess --verbose "/Applications/Xcode.app"
    fi
}
# Extract each architecture of a fat library into its own directory
function dump_fat_lib() {
	if [[ $# != 1 ]]; then
		echo "Usage: dump_fat_lib Foo.lib"
		return 1
	fi
    if [[ ! -f $1 ]]; then
        echo "[!] No such file or directory: $1"
        return 1
    fi
	# We don't know in advance what architectures this library supports,
	# so go figure this out first
	actual_targets=()
	file_info=$(file $1)
	for arch in "x86_64" "i386" "armv7" "arm64"; do
		if [[ $file_info == *${arch}* ]]; then
			actual_targets+=(${arch})
		fi
	done
	# Then create a directory for each architecture and extract
	# the library's contents there
	for arch in "${actual_targets[@]}"; do
        echo "Dumping ${arch}"
		lipo -thin ${arch} -output ${arch}.ar $1
		mkdir -p ${arch}
		(cd ${arch} && ar -x ../${arch}.ar)
		rm ${arch}.ar
	done
    echo "Done! You're awesome :)"
	return 0
}

function dump_fat() {
    if [[ $# != 1 ]]; then
		echo "Usage: dump_fat MyExecutable"
		return 1
	fi
    target=$1
    for arch in "x86_64" "i386" "armv7" "arm64"; do
    	lipo "${target}" -verify_arch "${arch}"
    	if [[ $? -eq 0 ]]; then
    		echo "Dumping ${arch} from a fat binary ${target}"
            base=$(basename "${target}")
    		lipo -thin "${arch}" -output "${base}_${arch}" "${target}"
        fi
    done
    echo "Done!"
}

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
plugins=()

source $ZSH/oh-my-zsh.sh

zle -N edit-command-line
bindkey -M vicmd v edit-command-line

# Opt-out from sending analytics and usage for package managers
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=0
export COCOAPODS_DISABLE_STATS=true
export FASTLANE_OPT_OUT_USAGE=1
export FASTLANE_SKIP_UPDATE_CHECK=1
export FASTLANE_HIDE_CHANGELOG=1

# Customize to your needs...
export PATH="/opt/homebrew/opt/ruby/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/local/bin:/usr/local/sbin"

# Completition for kill[all] proceses' name
zstyle ':completion:*:processes' command 'ps -ax'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;32'
zstyle ':completion:*:kill:*'   force-list always
zstyle ':completion:*:processes-names' command 'ps -e -o comm='
zstyle ':completion:*:killall:*'   force-list always

# Add some colors for man
export LESS_TERMCAP_mb=$'\E[01;31m'       # begin blinking
export LESS_TERMCAP_md=$'\E[01;38;5;74m'  # begin bold
export LESS_TERMCAP_me=$'\E[0m'           # end mode
export LESS_TERMCAP_se=$'\E[0m'           # end standout-mode
export LESS_TERMCAP_so=$'\E[38;5;246m'    # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'           # end underline
export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underline

eval "$(/opt/homebrew/bin/brew shellenv)"
alias ibrew='arch -x86_64 /usr/local/bin/brew'
